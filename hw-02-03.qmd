---
title: "Correlating like a Data Master"
subtitle: "Homework 2, Part 3 of 3"
author: "Kristi Manasil"
gitid: "kmanasil"
format: html
editor: visual
---

# **Correlating Like a Data Master**

## **Purpose of this chapter**

**Assess relationships within a novel data set using publication quality tables and plots**

## **Take-aways**

1.  Describe and visualize correlations between numerical variables

2.  Visualize correlations of all numerical variables within groups

3.  Describe and visualize relationships based on target variables

### **Required setup**

We first need to prepare our environment with the necessary packages.

```{r, eval=FALSE}

# Required package for quick package downloading and loading 
if (!require(pacman))
  install.packages("pacman")


# code for troubleshootinh geeting colorblindr to work
if (!require(BiocManager))
  install.packages('BiocManager')
if(!require(devtools))
  install.packages("devtools")
devtools::install_github("clauswilke/colorblindr")

pacman::p_load(colorblindr, 
               dlookr, 
               formattable, 
               GGally, 
               ggpdist, 
               ggpubr, 
               ggridges, 
               here, 
               tidyverse) 

# Set global ggplot() theme
# Theme pub_clean() from the ggpubr package with base text size = 16
theme_set(theme_pubclean(base_size = 16)) 
# All axes titles to their respective far right sides
theme_update(axis.title = element_text(hjust = 1))
# Remove axes ticks
theme_update(axis.ticks = element_blank()) 
# Remove legend key
theme_update(legend.key = element_blank())
```

## **Load the Examine a Data Set**

I am using the ferris wheel data from TidyTuesday : https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-08-09/wheels.csv

```{r}
ferris_wheel_data <- read.csv(here("data", "wheels.csv"))

ferris_wheel_data %>% head() %>% formattable()
```

Clean up Data

```{r}
# cut if down to five columns
ferris_wheel_data <- ferris_wheel_data %>% select(c("country", "number_of_cabins", "passengers_per_cabin", "seating_capacity", "hourly_capacity"))

# remove rows with na values
ferris_wheel_data <- ferris_wheel_data[complete.cases(ferris_wheel_data),]

ferris_wheel_data <- ferris_wheel_data %>% filter(country == "Japan" | country == "USA"|country == "China")


```

## **Describe and Visualize Correlations**

[Correlations](https://en.wikipedia.org/wiki/Correlation) are a statistical relationship between two numerical variables, may or may not be causal. Exploring correlations in your data allows you determine data independence, a major [assumption of parametric statistics](https://www.statology.org/parametric-tests-assumptions/), which means your variables are both randomly collected.

#### If you're interested in some underlying statistics...

Note that the `dlookr` default correlation is the [Pearson's � coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficienthttps://en.wikipedia.org/wiki/Pearson_correlation_coefficient), but you can specify any method you would like: `correlate(dataset, method = "")`, where the method can be `"pearson"` for Pearson's �, `"spearman"` for [Spearman's](https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient) �, or `"kendall"` for [Kendall's](https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient) �. The main differences are that Pearson's � assumes a normal distribution for ALL numerical variables, whereas Spearman's � and Kendall's � do not, but Spearman's � requires �\>10, and Kendall's � does not. Notably, Kendall's � performs as well as Spearman's � when �\>10, so its best to just use Kendall's � when data are not normally distributed.

```{r}
# Table of correlations between numerical variables (we are sticking to the default Pearson's r coefficient)
correlate(ferris_wheel_data) |>
  formattable()
```

```{r}
# Correlation matrix of numerical variables
ferris_wheel_data %>% 
plot_correlate()
```

## **Visualize Correlations within Groups**

If we have groups that we will compare later on, it is a good idea to see how each numerical variable correlates within these groups.

```{r}
ferris_wheel_data %>% group_by(country) %>% plot_correlate()
```

This is great, we have our correlations within groups! However, the correlation matrices aren't always the most intuitive, so let's plot!

We will be using the `ggpairs()` function within the `GGally` package. Specifically, we are looking at the correlations between number of cabins and hourly capacity.

```{r}
ferris_wheel_data %>% 
  dplyr::select(country, number_of_cabins, hourly_capacity) %>% ggpairs(aes(color=country, alpha = 0.5)) +
  theme(strip.background = element_blank())+
  scale_fill_OkabeIto()+
  scale_color_OkabeIto()

```

## **Describe and Visualize Relationships Based on Target Variables**

### **Target Variables**

`Target variables` are essentially numerical or categorical variables that you want to relate others to in a data frame. `dlookr` does this through the `target_by()` function, which is similar to `group_by()` in `dplyr`. The `relate()` function then briefly analyzes the relationship between the target variable and the variables of interest.

The relationships below will have the formula relationship `target ~ predictor`.

### **Numerical Target Variables: Numerical Variable of Interest**

`Formula: number_of_cabins (numerical response)  ~ seating_capacity (numerical predictor)`

```{r}
# First, we need to remove NAs, they cause an error
# I have done this already 

# The numerical predictor variable that we want
num <- target_by(ferris_wheel_data, number_of_cabins)

# Relating the variable of interest to the numerical target variable
num_num <- relate(num, seating_capacity)

# Summary of the regression analysis - the same as the summary from lm(Formula)
summary(num_num)
```

```{r}
# Plotting the linear relationship
plot(num_num)
```

### **Numerical Target Variables: Categorical Variable of Interest**

Formula: `seating_capacity (numerical response) ~ country (categorical predictor)`

```{r}
# The categorical predictor variable that we want
num <- target_by(ferris_wheel_data, seating_capacity) 

# We need to change Group to a factor
num$country <- as.factor(num$country)

# Relating the variable of interest to the numerical target variable
num_cat <- relate(num, country)

# Summary of the ANOVA analysis - the same as the summary from anova(lm(Formula))
summary(num_cat)
```

```{r}
plot(num_cat) + 
  theme(axis.text.x = element_blank())
```

### **Categorical Target Variables: Numerical Variable of Interest**

Note that this produces descriptive statistics, unlike the other relationships we are looking at.

Formula: `country (categorical) ~ seating_capacity (numerical)`

```{r}
# The categorical predictor variable that we want
categ <- target_by(ferris_wheel_data, country)

# Relating the variable of interest to the numerical target variable
cat_num <- relate(categ, seating_capacity)

# Summary of descriptive statistics
summary(cat_num)
```

```{r}
plot(cat_num) 
```

### **Categorical Target Variables: Categorical Variable of Interest**

Notably, there is only one categorical variable... Let's make another:

If mSeating_Capacity \> mean(seating_capacity) + sd(seating_capacity) then "Yes", else "No".

```{r}
# Create new categorical column
cat_dataset <- ferris_wheel_data %>% 
  select(seating_capacity, country) %>% 
  mutate(HighSeating = ifelse(
    seating_capacity > (mean(seating_capacity + sd(seating_capacity))), 
                          "Yes", 
                          "No"))

# New dataset 
cat_dataset %>% 
  head() %>% 
  formattable()
```

Now we have two categories!

Formula = `HighSeating (categorical) ~ country (categorical response)`

```{r}
# The categorical predictor variable that we want
categ <- target_by(cat_dataset, HighSeating)

# Relating the variable of interest to the categorical target variable
cat_cat <- relate(categ, country)

# Summary of the Chi-square test for Independence
summary(cat_cat)
```

```{r}
plot(cat_cat)
```
